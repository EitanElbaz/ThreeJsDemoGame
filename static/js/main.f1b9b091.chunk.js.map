{"version":3,"sources":["Hooks/usePlayerControls.ts","Components/Character/Character.tsx","Components/Ground/Ground.tsx","App.tsx","index.tsx"],"names":["keys","KeyW","KeyS","KeyA","KeyD","Space","usePlayerControls","useState","moveForward","moveBackward","moveLeft","moveRight","jump","movement","setMovement","onUp","useCallback","e","code","state","onDown","useHotkeys","keydown","keyup","Character","camera","useThree","useBox","position","mass","type","ref","api","velocity","useRef","useEffect","subscribe","v","current","useFrame","direction","Vector3","frontVector","sideVector","subVectors","normalize","multiplyScalar","applyEuler","rotation","set","x","z","Math","abs","Number","toFixed","castShadow","receiveShadow","args","color","Ground","props","usePlane","PI","attach","App","id","gravity","Sky","sunPosition","intensity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAGMA,EAAO,CACTC,KAAM,cACNC,KAAM,eACNC,KAAM,WACNC,KAAM,YACNC,MAAO,QA2CIC,MArCf,WAA8B,IAAD,EACOC,mBAAS,CACrCC,aAAa,EACbC,cAAc,EACdC,UAAU,EACVC,WAAW,EACXC,MAAM,IANe,mBAClBC,EADkB,KACRC,EADQ,KAQnBC,EAAOC,uBACT,SAACC,GACOjB,EAAKiB,EAAEC,OACPJ,GAAY,SAAAK,GAAK,kCACVA,GADU,kBAEZnB,EAAKiB,EAAEC,OAAQ,SAI5B,CAACJ,IAECM,EAASJ,uBACX,SAACC,GACOjB,EAAKiB,EAAEC,OACPJ,GAAY,SAAAK,GAAK,kCACVA,GADU,kBAEZnB,EAAKiB,EAAEC,OAAQ,SAI5B,CAACJ,IAML,OAHAO,YAAW,gBAAiBD,EAAQ,CAAEE,SAAS,EAAMC,OAAO,GAAS,CAACH,IACtEC,YAAW,gBAAiBN,EAAM,CAAEQ,OAAO,EAAMD,SAAS,GAAS,CAACP,IAE7DF,G,QCIIW,EAxCoB,WAAO,IAC9BC,EAAWC,cAAXD,OAD6B,EAElBE,aAAO,iBAAO,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,KAAM,EAAGC,KAAM,cAFlC,mBAE9BC,EAF8B,KAEzBC,EAFyB,KAG/BC,EAAWC,iBAAO,CAAC,EAAG,EAAG,IAHM,EAI4B5B,IAAzDM,EAJ6B,EAI7BA,KAAMH,EAJuB,EAIvBA,aAAcD,EAJS,EAITA,YAAaE,EAJJ,EAIIA,SAAUC,EAJd,EAIcA,UA4BnD,OA1BAwB,qBAAU,WACNH,EAAIC,SAASG,WAAU,SAAAC,GACnBJ,EAASK,QAAUD,OAExB,CAACL,EAAIC,WAERM,aAAS,WAEL,IAAMC,EAAY,IAAIC,UAEhBC,EAAc,IAAID,UAAQ,EAAG,GAAIhC,EAAe,EAAI,IAAMD,EAAc,EAAI,IAC5EmC,EAAa,IAAIF,WAAS/B,EAAW,EAAI,IAAMC,EAAY,EAAI,GAAI,EAAG,GAE5E6B,EACKI,WAAWF,EAAaC,GACxBE,YACAC,eAxBC,GAyBDC,WAAWtB,EAAOuB,UAEvBhB,EAAIC,SAASgB,IAAIT,EAAUU,EAAGjB,EAASK,QAAQ,GAAIE,EAAUW,GAEzDvC,GAAQwC,KAAKC,IAAIC,OAAOrB,EAASK,QAAQ,GAAGiB,QAAQ,KAAO,KAC3DvB,EAAIC,SAASgB,IAAIhB,EAASK,QAAQ,GAAI,EAAGL,EAASK,QAAQ,OAK9D,uBAAMP,IAAKA,EAAKyB,YAAU,EAACC,eAAa,EAAxC,UACI,mCAAmBC,KAAM,CAAC,EAAG,EAAG,KAChC,sCAAsBC,MAAM,YC1BzBC,EAdiB,SAAAC,GAAU,IAAD,EACvBC,aAAS,+BACnBd,SAAU,EAAEI,KAAKW,GAAK,EAAG,EAAG,GAC5BnC,SAAU,CAAC,GAAI,EAAG,IACfiC,MAHA9B,EAD8B,oBAMrC,OACI,uBAAMA,IAAKA,EAAK0B,eAAa,EAA7B,UACI,qCAAqBO,OAAO,WAAWN,KAAM,CAAC,IAAK,OACnD,sCAAsBM,OAAO,WAAWL,MAAM,aCO3CM,MAhBf,WACI,OACI,qBAAKC,GAAG,MAAR,SACI,cAAC,IAAD,UACI,eAAC,IAAD,CAASC,QAAS,CAAC,GAAI,GAAI,GAA3B,UACI,cAACC,EAAA,EAAD,CAAKC,YAAa,CAAC,IAAK,GAAI,OAC5B,8BAAcC,UAAW,MACzB,4BAAYd,YAAU,EAACc,UAAW,GAAK1C,SAAU,CAAC,IAAK,IAAK,OAC5D,cAAC,EAAD,IACA,cAAC,EAAD,YCVpB2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f1b9b091.chunk.js","sourcesContent":["import { useHotkeys } from 'react-hotkeys-hook';\nimport { useCallback, useState } from 'react';\n\nconst keys = {\n    KeyW: 'moveForward',\n    KeyS: 'moveBackward',\n    KeyA: 'moveLeft',\n    KeyD: 'moveRight',\n    Space: 'jump',\n};\nfunction actionByKey(key) {\n    return keys[key];\n}\n\nfunction usePlayerControls() {\n    const [movement, setMovement] = useState({\n        moveForward: false,\n        moveBackward: false,\n        moveLeft: false,\n        moveRight: false,\n        jump: false,\n    });\n    const onUp = useCallback(\n        (e: KeyboardEvent) => {\n            if (keys[e.code]) {\n                setMovement(state => ({\n                    ...state,\n                    [keys[e.code]]: false,\n                }));\n            }\n        },\n        [setMovement],\n    );\n    const onDown = useCallback(\n        (e: KeyboardEvent) => {\n            if (keys[e.code]) {\n                setMovement(state => ({\n                    ...state,\n                    [keys[e.code]]: true,\n                }));\n            }\n        },\n        [setMovement],\n    );\n\n    useHotkeys('w,a,s,d,space', onDown, { keydown: true, keyup: false }, [onDown]);\n    useHotkeys('w,a,s,d,space', onUp, { keyup: true, keydown: false }, [onUp]);\n\n    return movement;\n}\n\nexport default usePlayerControls;\n","import React, { useEffect, useRef } from 'react';\nimport { useBox } from '@react-three/cannon';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { Vector3 } from 'three';\nimport { usePlayerControls } from '../../Hooks';\n\ntype Props = {\n    //\n};\n\nconst SPEED = 6;\n\nconst Character: React.FC<Props> = () => {\n    const { camera } = useThree();\n    const [ref, api] = useBox(() => ({ position: [0, 2, 0], mass: 1, type: 'Dynamic' }));\n    const velocity = useRef([0, 0, 0]);\n    const { jump, moveBackward, moveForward, moveLeft, moveRight } = usePlayerControls();\n\n    useEffect(() => {\n        api.velocity.subscribe(v => {\n            velocity.current = v;\n        });\n    }, [api.velocity]);\n\n    useFrame(() => {\n        // camera.position.copy(ref.current!.position);\n        const direction = new Vector3();\n\n        const frontVector = new Vector3(0, 0, (moveBackward ? 1 : 0) - (moveForward ? 1 : 0));\n        const sideVector = new Vector3((moveLeft ? 1 : 0) - (moveRight ? 1 : 0), 0, 0);\n\n        direction\n            .subVectors(frontVector, sideVector)\n            .normalize()\n            .multiplyScalar(SPEED)\n            .applyEuler(camera.rotation);\n\n        api.velocity.set(direction.x, velocity.current[1], direction.z);\n\n        if (jump && Math.abs(Number(velocity.current[1].toFixed(2))) < 0.05) {\n            api.velocity.set(velocity.current[0], 8, velocity.current[2]);\n        }\n    });\n\n    return (\n        <mesh ref={ref} castShadow receiveShadow>\n            <boxBufferGeometry args={[1, 1, 1]} />\n            <meshStandardMaterial color=\"red\" />\n        </mesh>\n    );\n};\n\nexport default Character;\n","import React from 'react';\nimport { usePlane } from '@react-three/cannon';\n\ntype Props = {\n    //\n};\n\nconst Ground: React.FC<Props> = props => {\n    const [ref] = usePlane(() => ({\n        rotation: [-Math.PI / 2, 0, 0],\n        position: [0, -1, 0],\n        ...props,\n    }));\n    return (\n        <mesh ref={ref} receiveShadow>\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n            <meshStandardMaterial attach=\"material\" color=\"blue\" />\n        </mesh>\n    );\n};\n\nexport default Ground;\n","import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Sky } from '@react-three/drei';\nimport { Physics } from '@react-three/cannon';\nimport './App.css';\nimport { Character, Ground } from './Components';\n\nfunction App() {\n    return (\n        <div id=\"app\">\n            <Canvas>\n                <Physics gravity={[0, -30, 0]}>\n                    <Sky sunPosition={[100, 20, 100]} />\n                    <ambientLight intensity={0.25} />\n                    <pointLight castShadow intensity={0.7} position={[100, 100, 100]} />\n                    <Character />\n                    <Ground />\n                </Physics>\n            </Canvas>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}