{"version":3,"sources":["Hooks/usePlayerControls.ts","Components/Camera/ThirdPersonCamera.tsx","Components/Character/Character.tsx","Components/Ground/Ground.tsx","App.tsx","index.tsx"],"names":["keys","KeyW","KeyS","KeyA","KeyD","Space","usePlayerControls","useState","moveForward","moveBackward","moveLeft","moveRight","jump","movement","setMovement","onUp","useCallback","e","code","state","onDown","useHotkeys","keydown","keyup","targetWorldPosition","target","getWorldPosition","position","ThirdPersonCamera","lookAt","useRef","Vector3","camera","useThree","useFrame","delta","idealOffset","applyQuaternion","quaternion","add","y","calculateIdealOffset","idealLookat","calculateIdealLookat","t","current","lerp","copy","Character","useBox","mass","type","ref","api","velocity","useEffect","subscribe","v","direction","frontVector","sideVector","subVectors","normalize","multiplyScalar","applyEuler","rotation","set","x","z","Math","abs","Number","toFixed","castShadow","receiveShadow","args","color","Ground","props","usePlane","PI","attach","App","id","gravity","Sky","sunPosition","intensity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5dc6587.chunk.js","sourcesContent":["import { useHotkeys } from 'react-hotkeys-hook';\nimport { useCallback, useState } from 'react';\n\nconst keys = {\n    KeyW: 'moveForward',\n    KeyS: 'moveBackward',\n    KeyA: 'moveLeft',\n    KeyD: 'moveRight',\n    Space: 'jump',\n};\n\nfunction usePlayerControls() {\n    const [movement, setMovement] = useState({\n        moveForward: false,\n        moveBackward: false,\n        moveLeft: false,\n        moveRight: false,\n        jump: false,\n    });\n    const onUp = useCallback(\n        (e: KeyboardEvent) => {\n            if (keys[e.code]) {\n                setMovement(state => ({\n                    ...state,\n                    [keys[e.code]]: false,\n                }));\n            }\n        },\n        [setMovement],\n    );\n    const onDown = useCallback(\n        (e: KeyboardEvent) => {\n            if (keys[e.code]) {\n                setMovement(state => ({\n                    ...state,\n                    [keys[e.code]]: true,\n                }));\n            }\n        },\n        [setMovement],\n    );\n\n    useHotkeys('w,a,s,d,space', onDown, { keydown: true, keyup: false }, [onDown]);\n    useHotkeys('w,a,s,d,space', onUp, { keyup: true, keydown: false }, [onUp]);\n\n    return movement;\n}\n\nexport default usePlayerControls;\n","import React, { useRef } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { Object3D, Vector3 } from 'three';\n\ntype Props = {\n    //\n    target: Object3D;\n};\n\nfunction targetWorldPosition(target: Object3D) {\n    return target.getWorldPosition(target.position);\n}\n\nfunction calculateIdealOffset(target: Object3D) {\n    const idealOffset = new Vector3(-0, 10, -15);\n    idealOffset.applyQuaternion(target.quaternion);\n    idealOffset.add(targetWorldPosition(target));\n\n    // idealOffset.y = Math.max(idealOffset.y, terrain.GetHeight(idealOffset)[0] + 5.0);\n    idealOffset.y = 5;\n\n    return idealOffset;\n}\n\nfunction calculateIdealLookat(target: Object3D) {\n    const idealLookat = new Vector3(0, 5, 20);\n    idealLookat.applyQuaternion(target.quaternion);\n    idealLookat.add(targetWorldPosition(target));\n    return idealLookat;\n}\n\nconst ThirdPersonCamera: React.FC<Props> = ({ target }) => {\n    const targetPos = useRef(new Vector3());\n    const lookAt = useRef(new Vector3());\n    const position = useRef(new Vector3());\n    const { camera } = useThree();\n\n    useFrame((state, delta) => {\n        const idealOffset = calculateIdealOffset(target);\n        const idealLookat = calculateIdealLookat(target);\n\n        // const t = 0.05;\n        // const t = 4.0 * timeElapsed;\n        const t = 1.0 - 0.01 ** delta;\n        // const t = 1.0 - Math.pow(0.01, delta);\n\n        // console.log(idealOffset);\n\n        // console.log(target.position);\n\n        position.current.lerp(idealOffset, t);\n        lookAt.current.lerp(idealLookat, t);\n\n        camera.position.copy(position.current);\n        camera.lookAt(lookAt.current);\n    });\n    return null;\n};\n\nexport default ThirdPersonCamera;\n","import React, { useEffect, useRef } from 'react';\nimport { useBox } from '@react-three/cannon';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport { Vector3 } from 'three';\nimport { usePlayerControls } from '../../Hooks';\nimport { ThirdPersonCamera } from '../Camera';\n\ntype Props = {\n    //\n};\n\nconst SPEED = 6;\n\nconst Character: React.FC<Props> = () => {\n    const { camera } = useThree();\n    const [ref, api] = useBox(() => ({ position: [0, 2, 0], mass: 1, type: 'Dynamic' }));\n    const velocity = useRef([0, 0, 0]);\n    const { jump, moveBackward, moveForward, moveLeft, moveRight } = usePlayerControls();\n\n    useEffect(() => {\n        api.velocity.subscribe(v => {\n            velocity.current = v;\n        });\n    }, [api.velocity]);\n\n    useFrame(() => {\n        if (jump || moveBackward || moveForward || moveLeft || moveRight) {\n            const direction = new Vector3();\n\n            const frontVector = new Vector3(0, 0, (moveBackward ? 1 : 0) - (moveForward ? 1 : 0));\n            const sideVector = new Vector3((moveLeft ? 1 : 0) - (moveRight ? 1 : 0), 0, 0);\n\n            direction\n                .subVectors(frontVector, sideVector)\n                .normalize()\n                .multiplyScalar(SPEED)\n                .applyEuler(camera.rotation);\n\n            api.velocity.set(direction.x, velocity.current[1], direction.z);\n            // api.angularVelocity.set(0, 0, 0);\n            // api.position.set(direction.x, velocity.current[1], direction.z);\n\n            if (jump && Math.abs(Number(velocity.current[1].toFixed(2))) < 0.05) {\n                api.velocity.set(velocity.current[0], 8, velocity.current[2]);\n            }\n        }\n    });\n\n    return (\n        <>\n            {ref.current && <ThirdPersonCamera target={ref.current} />}\n            <mesh ref={ref} castShadow receiveShadow>\n                <boxBufferGeometry args={[1, 1, 1]} />\n                <meshStandardMaterial color=\"red\" />\n            </mesh>\n        </>\n    );\n};\n\nexport default Character;\n","import React from 'react';\nimport { usePlane } from '@react-three/cannon';\n\ntype Props = {\n    //\n};\n\nconst Ground: React.FC<Props> = props => {\n    const [ref] = usePlane(() => ({\n        rotation: [-Math.PI / 2, 0, 0],\n        position: [0, -1, 0],\n        type: 'Static',\n        ...props,\n    }));\n    return (\n        <mesh ref={ref} receiveShadow>\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n            <meshStandardMaterial attach=\"material\" color=\"blue\" />\n        </mesh>\n    );\n};\n\nexport default Ground;\n","import React from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Sky } from '@react-three/drei';\nimport { Physics } from '@react-three/cannon';\nimport './App.css';\nimport { Character, Ground } from './Components';\n\nfunction App() {\n    return (\n        <div id=\"app\">\n            <Canvas>\n                <Physics gravity={[0, -30, 0]}>\n                    <Sky sunPosition={[100, 20, 100]} />\n                    <ambientLight intensity={0.25} />\n                    <pointLight castShadow intensity={0.7} position={[100, 100, 100]} />\n                    <Character />\n                    <Ground />\n                </Physics>\n            </Canvas>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}